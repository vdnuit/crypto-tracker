{"version":3,"sources":["api.ts","atoms.ts","routes/Chart.tsx","routes/Price.tsx","routes/Coin.tsx","routes/Coins.tsx","Router.tsx","theme.ts","App.tsx","index.tsx"],"names":["BASE_URL","fetchCoins","fetch","then","response","json","isDarkAtom","atom","key","default","Chart","coinId","useRecoilValue","useQuery","Math","floor","Date","now","fetchCoinHistory","refetchInterval","isLoading","data","type","height","series","map","price","x","time_close","y","open","high","low","close","options","chart","title","text","align","xaxis","yaxis","tooltip","enabled","Price","Title","styled","h1","props","theme","accentColor","Loader","span","Container","div","Header","header","Overview","OverviewItem","Description","p","Tabs","Tab","isActive","textColor","Coin","useParams","state","useLocation","priceMatch","useRouteMatch","chartMatch","fetchCoinInfo","infoLoading","infoData","fetchCoinTickers","tickersLoading","tickersData","loading","Helmet","name","to","rank","symbol","quotes","USD","toFixed","description","total_supply","max_supply","path","CoinsList","ul","li","cardBgColor","Img","img","Coins","setDarkAtom","useSetRecoilState","onClick","prev","slice","coin","pathname","id","src","toLowerCase","split","join","Router","darkTheme","bgColor","lightTheme","GlobalStyle","createGlobalStyle","App","isDark","initialIsOpen","queryClient","QueryClient","ReactDOM","render","StrictMode","client","document","getElementById"],"mappings":"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","file":"static/js/main.407b8888.chunk.js","sourcesContent":["const BASE_URL = `https://api.coinpaprika.com/v1`;\r\nconst COIN_URL = `https://ohlcv-api.nomadcoders.workers.dev`;\r\nexport function fetchCoins() {\r\n  return fetch(`${BASE_URL}/coins`).then((response) => response.json());\r\n}\r\n\r\nexport function fetchCoinInfo(coinId: string) {\r\n  return fetch(`${BASE_URL}/coins/${coinId}`).then((response) =>\r\n    response.json()\r\n  );\r\n}\r\n\r\nexport function fetchCoinTickers(coinId: string) {\r\n  return fetch(`${BASE_URL}/tickers/${coinId}`).then((response) =>\r\n    response.json()\r\n  );\r\n}\r\n\r\nexport function fetchCoinHistory(coinId: string) {\r\n  const endDate = Math.floor(Date.now() / 1000);\r\n  //floor: 버림, ceil: 올림\r\n  const startDate = endDate - 60 * 60 * 24 * 7 * 2;\r\n  // 시작/끝 날짜데이터를 보내고 받아올 때\r\n  return fetch(\r\n    `${COIN_URL}?coinId=${coinId}`\r\n  ).then((response) => response.json());\r\n}\r\n//   fetcher function은 fetch promise를 리턴해야 한다.\r\n// 함수가 URL을 부르고 URL이 json 리턴","import { atom } from \"recoil\";\r\n\r\nexport const isDarkAtom = atom({\r\n  key: \"isDark\",\r\n  default: true,\r\n});","import { useQuery } from \"react-query\";\r\nimport { fetchCoinHistory } from \"../api\";\r\nimport ApexChart from \"react-apexcharts\";\r\n// Chart 컴포넌트가 있으니까 ApexCHart로\r\nimport { useRecoilValue } from \"recoil\";\r\nimport { isDarkAtom } from \"../atoms\";\r\n\r\ninterface IHistorical {\r\n  //비트코인 시장의 하루\r\n  time_open: string;\r\n  time_close: string;\r\n  open: number;\r\n  high: number;\r\n  low: number;\r\n  close: number;\r\n  volume: number;\r\n  market_cap: number;\r\n}\r\ninterface ChartProps {\r\n  coinId: string;\r\n}\r\nfunction Chart({ coinId }: ChartProps) {\r\n  const isDark = useRecoilValue(isDarkAtom);  const { isLoading, data } = useQuery<IHistorical[]>(\r\n    [\"ohlcv\", coinId],\r\n    () => fetchCoinHistory(coinId),\r\n    {\r\n      refetchInterval: 10000,\r\n    }\r\n  //왜 <IHistorical[]>인가?: 하루에 해당하는 것의 배열이기 때문/10초마다 refetch\r\n  );\r\n  return (\r\n    <div>\r\n      {isLoading ? (\r\n        \"Loading chart...\"\r\n      ) : (\r\n        <ApexChart\r\n          type=\"candlestick\"\r\n          //series: 데이터를 보내는 props. data는 배열이어야한다. , 찍고 여러가지 차트를 한 번에 표현할 수도 있다.\r\n          height={350}\r\n          series={[\r\n            {\r\n              // name: \"Price\",\r\n              //array를 만들기 위해 map() 함수 사용.\r\n              // data: data?.map((price => price.close)) ?? [],\r\n              data: data?.map((price) => {\r\n                return{\r\n                  x: new Date(price.time_close),\r\n                  y: [price.open, price.high, price.low, price.close]\r\n                }\r\n              }) ?? [],\r\n              // data: [{\r\n              //   x: new Date(1538778600000),\r\n              //   y: [6629.81, 6650.5, 6623.04, 6633.33]\r\n              // },\r\n              // {\r\n              //   x: new Date(1538780400000),\r\n              //   y: [6632.01, 6643.59, 6620, 6630.11]\r\n              // },]??[]\r\n            }\r\n          ]}\r\n          options={{\r\n            chart: {\r\n              type: 'candlestick',\r\n              height: 350\r\n            },\r\n            title: {\r\n              text: 'CandleStick Chart',\r\n              align: 'left'\r\n            },\r\n            xaxis: {\r\n              type: 'datetime'\r\n            },\r\n            yaxis: {\r\n              tooltip: {\r\n                enabled: true\r\n              }\r\n            }\r\n          }}\r\n          // options={{\r\n          //   theme: {\r\n          //     mode: isDark ? \"dark\" : \"light\",\r\n          //   },\r\n          //   chart: {\r\n          //     height: 300,\r\n          //     width: 500,\r\n          //     toolbar: {\r\n          //       show: false,\r\n          //     },\r\n          //     background: \"transparent\",\r\n          //   },\r\n          //   grid: { show: false },\r\n          //   stroke: {\r\n          //     curve: \"smooth\",\r\n          //     width: 4,\r\n          //   },\r\n          //   yaxis: {\r\n          //     show: false,\r\n          //   },\r\n          //   xaxis: {\r\n          //     axisBorder: { show: false },\r\n          //     axisTicks: { show: false },\r\n          //     labels: { show: false },\r\n          //     type: \"datetime\",\r\n          //     categories: data?.map((price) => price.time_close),\r\n          //   },\r\n          //   fill: {\r\n          //     type: \"gradient\",\r\n          //     gradient: { gradientToColors: [\"#0be881\"], stops: [0, 100] },\r\n          //   },\r\n          //   //차트를 예쁘게 만들기 위한 노력들\r\n          //   //stops 같은 경우는 그라데이션을 천천히 진행되게 한다.\r\n          //   colors: [\"#0fbcf9\"],\r\n          //   //tooltip은 커서가 가는 곳에 뜨는 것. 반올림 해주었다.\r\n          //   tooltip: {\r\n          //     y: {\r\n          //       formatter: (value) => `$${value.toFixed(2)}`,\r\n          //     },\r\n          //   },\r\n          //   //나머지 props들은 apexCharts 문서에서 확인하면 된다.\r\n          // }}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chart;","\r\nfunction Price() {\r\n  \r\n  return (\r\n   <div></div>\r\n  );\r\n}\r\n  \r\n  export default Price;","import { useQuery } from \"react-query\";\nimport { Helmet } from \"react-helmet\";\nimport {\n  Switch,\n  Route,\n  useLocation,\n  useParams,\n  useRouteMatch,\n} from \"react-router-dom\";\nimport { Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport { fetchCoinInfo, fetchCoinTickers } from \"../api\";\nimport Chart from \"./Chart\";\nimport Price from \"./Price\";\n\nconst Title = styled.h1`\n  font-size: 48px;\n  color: ${(props) => props.theme.accentColor};\n`;\n\nconst Loader = styled.span`\n  text-align: center;\n  display: block;\n`;\n\nconst Container = styled.div`\n  padding: 0px 20px;\n  max-width: 480px;\n  margin: 0 auto;\n`;\n\nconst Header = styled.header`\n  height: 15vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\nconst Overview = styled.div`\n  display: flex;\n  justify-content: space-between;\n  background-color: rgba(0, 0, 0, 0.5);\n  padding: 10px 20px;\n  border-radius: 10px;\n`;\nconst OverviewItem = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 33%;\n  span:first-child {\n    font-size: 10px;\n    font-weight: 400;\n    text-transform: uppercase;\n    margin-bottom: 5px;\n  }\n`;\nconst Description = styled.p`\n  margin: 20px 0px;\n`;\n\nconst Tabs = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  margin: 25px 0px;\n  gap: 10px;\n`;\n\nconst Tab = styled.span<{ isActive: boolean }>`\n  text-align: center;\n  text-transform: uppercase;\n  font-size: 12px;\n  font-weight: 400;\n  background-color: rgba(0, 0, 0, 0.5);\n  border-radius: 10px;\n  color: ${(props) =>\n    props.isActive ? props.theme.accentColor : props.theme.textColor};\n    // chart와 price 중 현재 활성화된 탭만 accentColor로 보여주기\n  a {\n    padding: 7px 0px;\n    display: block;\n  }\n`;\n\ninterface RouteParams {\n  coinId: string;\n}\ninterface RouteState {\n  name: string;\n}\n\n//interface 이름 시작을 I로 시작하기도 한다. IInfoData\ninterface InfoData {\n  id: string;\n  name: string;\n  symbol: string;\n  rank: number;\n  is_new: boolean;\n  is_active: boolean;\n  type: string;\n  description: string;\n  message: string;\n  open_source: boolean;\n  started_at: string;\n  development_status: string;\n  hardware_wallet: boolean;\n  proof_type: string;\n  org_structure: string;\n  hash_algorithm: string;\n  first_data_at: string;\n  last_data_at: string;\n}\n//#4.6 참고. 일일히 안 적어도 된다.\ninterface PriceData {\n  id: string;\n  name: string;\n  symbol: string;\n  rank: number;\n  circulating_supply: number;\n  total_supply: number;\n  max_supply: number;\n  beta_value: number;\n  first_data_at: string;\n  last_updated: string;\n  quotes: {\n    USD: {\n      ath_date: string;\n      ath_price: number;\n      market_cap: number;\n      market_cap_change_24h: number;\n      percent_change_1h: number;\n      percent_change_1y: number;\n      percent_change_6h: number;\n      percent_change_7d: number;\n      percent_change_12h: number;\n      percent_change_15m: number;\n      percent_change_24h: number;\n      percent_change_30d: number;\n      percent_change_30m: number;\n      percent_from_price_ath: number;\n      price: number;\n      volume_24h: number;\n      volume_24h_change_24h: number;\n    };\n  };\n}\n\ninterface ICoinProps {}\n\nfunction Coin({}: ICoinProps) {\n  const { coinId } = useParams<RouteParams>();\n  const { state } = useLocation<RouteState>();\n  //Coins.tsx의 Link 태그에서 보낸 오브젝트를 받아와 사용\n  // const [loading, setLoading] = useState(true);\n  // const [info, setInfo] = useState<InfoData>();\n  // const [priceInfo, setPriceInfo] = useState<PriceData>();\n\n  //useRouteMatch: 어떤 URL에 있는지 확인 .true면 object를 받는다.\n  const priceMatch = useRouteMatch(\"/:coinId/price\");\n  const chartMatch = useRouteMatch(\"/:coinId/chart\");\n  const { isLoading: infoLoading, data: infoData } = useQuery<InfoData>(\n    [\"info\", coinId],\n    () => fetchCoinInfo(coinId)\n  );\n  // [\"info\", coinId] 배열이 id\n  const { isLoading: tickersLoading, data: tickersData } = useQuery<PriceData>(\n    [\"tickers\", coinId],\n    () => fetchCoinTickers(coinId),\n    {\n      refetchInterval: 5000,\n    }\n    //5초마다 refetch 되게 하는 3번째 요소.\n  );\n  const loading = infoLoading || tickersLoading;\n  // useEffect(() => {\n  //   (async () => {\n  //     const infoData = await (\n  //       await fetch(`https://api.coinpaprika.com/v1/coins/${coinId}`)\n  //     ).json();\n  //     const priceData = await (\n  //       await fetch(`https://api.coinpaprika.com/v1/tickers/${coinId}`)\n  //     ).json();\n  //     setInfo(infoData);\n  //     setPriceInfo(priceData);\n  //     setLoading(false);\n  //     //그냥 데이터 받아오는 코드\n  //   })();\n  // }, [coinId]);\n  // //dependency 설정. coinId가 변하면 동작하라는 말이지만, URL에 있으므로 변경될 일은 없다. API request도 한 번만 실행.\n  return (\n    <Container>\n      <Helmet>\n        <title>\n          {state?.name ? state.name : loading ? \"Loading...\" : infoData?.name}\n        </title>\n      </Helmet>\n      <Header>\n        <Title>\n        {state?.name ? state.name : loading ? \"Loading...\" : infoData?.name}\n          {/* {state?.name ? state.name : loading ? \"Loading...\" : info?.name} */}\n        </Title>\n        <button>\n          <Link to={`/`}>뒤로 가기</Link>\n        </button>\n        {/* state가 존재하면 이름을, 아니면 로딩을-> 만약 URL로 바로 전속할 경우 state가 존재하지 않기 때문 */}\n      </Header>\n      {loading ? (\n        <Loader>Loading...</Loader>\n      ) : (\n        <>\n          <Overview>\n            <OverviewItem>\n              <span>Rank:</span>\n              <span>{infoData?.rank}</span>\n            </OverviewItem>\n            <OverviewItem>\n              <span>Symbol:</span>\n              <span>${infoData?.symbol}</span>\n            </OverviewItem>\n            <OverviewItem>\n            <span>Price:</span>\n            <span>${tickersData?.quotes?.USD?.price?.toFixed(3)}</span>\n            </OverviewItem>\n          </Overview>\n          <Description>{infoData?.description}</Description>\n          <Overview>\n            <OverviewItem>\n              <span>Total Suply:</span>\n              <span>{tickersData?.total_supply}</span>\n            </OverviewItem>\n            <OverviewItem>\n              <span>Max Supply:</span>\n              <span>{tickersData?.max_supply}</span>\n            </OverviewItem>\n          </Overview>\n          <Tabs>\n            <Tab isActive={chartMatch !== null}>\n              {/* useRouteMatch: 그 URL에 들어와있지 않다면, */}\n              <Link to={`/${coinId}/chart`}>Chart</Link>\n              {/* to=/chart로 작성하면 local:3000/chart가 된다. 그거 말고 /btc-coin/chart로 */}\n            </Tab>\n            <Tab isActive={priceMatch !== null}>\n              <Link to={`/${coinId}/price`}>Price</Link>\n            </Tab>\n          </Tabs>\n          {/* price 혹은 chart 중 택1 */}\n          <Switch>\n            <Route path={`/:coinId/price`}>\n              {/* coinId 그냥 써도 리액트가 알아서 잘 찾아쓴다. */}\n              <Price />\n            </Route>\n            <Route path={`/:coinId/chart`}>\n              <Chart coinId={coinId} />\n            </Route>\n          </Switch>\n        </>\n      )}\n    </Container>\n  );\n}\nexport default Coin;","import { Helmet } from \"react-helmet\";\nimport { useQuery } from \"react-query\";\nimport { useSetRecoilState } from \"recoil\";\nimport styled from \"styled-components\";\nimport { Link } from \"react-router-dom\";\nimport { fetchCoins } from \"../api\";\nimport { appendFile } from \"fs\";\nimport { isDarkAtom } from \"../atoms\";\n\nconst Container = styled.div`\n  padding: 0px 20px;\n  max-width: 480px;\n  margin: 0 auto;\n`;\n\nconst Header = styled.header`\n  height: 15vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst CoinsList = styled.ul``;\n\nconst Coin = styled.li`\n  background-color: ${(props) => props.theme.cardBgColor};\n  color: ${(props) => props.theme.textColor};\n  border-radius: 15px;\n  margin-bottom: 10px;\n  border: 1px solid white;\n  a {\n    padding: 20px;\n    transition: color 0.2s ease-in;\n    display: flex;\n    align-items: center;\n    // 카드 끝 부분까지 선택 + 호버 슬로우 효과 \n  }\n  &:hover {\n    a {\n      color: ${(props) => props.theme.accentColor};\n    }\n  }\n`;\n\nconst Title = styled.h1`\n  font-size: 48px;\n  color: ${(props) => props.theme.accentColor};\n`;\n\nconst Loader = styled.span`\n  text-align: center;\n  display: block;\n`;\n\nconst Img = styled.img`\n  width: 35px;\n  height: 35px;\n  margin-right: 10px;\n`;\n\ninterface ICoin {\n  id: string;\n  name: string;\n  symbol: string;\n  rank: number;\n  is_new: boolean;\n  is_active: boolean;\n  type: string;\n}\n// 코인파프리카에서 가져오는 데이터의 자료형 명명\n\ninterface ICoinsProps {}\n\nfunction Coins() {\n  const setDarkAtom = useSetRecoilState(isDarkAtom);\n  const toggleDarkAtom = () => setDarkAtom((prev) => !prev);\n  const { isLoading, data } = useQuery<ICoin[]>(\"allCoins\", fetchCoins);\n// fetchCoins가 로딩 중이면 리액트 쿼리가 알려줌. fetcher이 끝나면 json을 data에 넣는다.\n  // 아래의 fetcher function, API와 관련된 모든 코드를 api.ts로 이동시킴.\n  /* useQuery를 사용하지 않았을 때\n  const [coins, setCoins] = useState<CoinInterface[]>([]);\n  //State가 CoinInterface로 구성된 배열임을 알려준다.\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    (async () => {\n      //파프리카에서 데이터를 불러온다 처음 한번만 실행된다.\n      const response = await fetch(\"https://api.coinpaprika.com/v1/coins\");\n      const json = await response.json();\n      setCoins(json.slice(0, 100));\n      setLoading(false);\n    })();\n    //괄호가 하나 더 붙은 이유는 즉시 실행하기 위함.\n  }, []);\n  */\n  return (\n    <Container>\n      <Helmet>\n        <title>코인</title>\n      </Helmet>\n      <Header>\n        <Title>코인</Title>\n        <button onClick={toggleDarkAtom}>Toggle Mode</button>\n      </Header>\n      {isLoading ? (\n        <Loader>Loading...</Loader>\n      ) : (\n        <CoinsList>\n          {/* coins 배열의 각각의 코인에 대해 id를 key로 name 가져오기 + 링크 걸어주기*/}\n          {/* {coins.map((coin) => ( */}\n          {data?.slice(0, 100).map((coin) => (\n            // useQuery 사용 시엔 json이 담긴 data를 전과 같이 100개만 슬라이스 해주어야 한다.\n            <Coin key={coin.id}>\n              <Link\n                to={{\n                  pathname: `/${coin.id}`,\n                  state: { name: coin.name },\n                }}\n                //URL을 통하지 않고 Object를 사용하여 데이터 전달.\n              >\n                <Img\n                  src={`https://raw.githubusercontent.com/ErikThiart/cryptocurrency-icons/master/16/${coin.name .toLowerCase().split(\" \").join(\"-\")}.png`}\n                />\n                {coin.name} &rarr;\n              </Link>\n            </Coin>\n          ))}\n        </CoinsList>\n      )}\n    </Container>\n  );\n}\nexport default Coins;","import { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport Coin from \"./routes/Coin\";\nimport Coins from \"./routes/Coins\";\n\ninterface IRouterProps {}\n\nfunction Router({}: IRouterProps) {\n\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route path=\"/:coinId\">\n          <Coin />\n        </Route>\n        <Route path=\"/\">\n        <Coins />\n        </Route>\n      </Switch>\n    </BrowserRouter>\n  );\n}\nexport default Router;\n","import { DefaultTheme } from \"styled-components\";\n\nexport const darkTheme: DefaultTheme = {\n  bgColor: \"#2f3640\",\n  textColor: \"white\",\n  accentColor: \"#9c88ff\",\n  cardBgColor: \"transparent\",\n};\n\nexport const lightTheme: DefaultTheme = {\n  bgColor: \"whitesmoke\",\n  textColor: \"black\",\n  accentColor: \"#9c88ff\",\n  cardBgColor: \"white\",\n};\n","import { createGlobalStyle, ThemeProvider } from \"styled-components\";\nimport Router from \"./Router\";\nimport { ReactQueryDevtools } from \"react-query/devtools\";\nimport { darkTheme, lightTheme } from \"./theme\";\nimport { useRecoilValue } from \"recoil\";\nimport { isDarkAtom } from \"./atoms\";\n\nconst GlobalStyle = createGlobalStyle`\n@import url('https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@300;400&display=swap');\n// font import\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, menu, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed,\nfigure, figcaption, footer, header, hgroup,\nmain, menu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  font-size: 100%;\n  font: inherit;\n  vertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure,\nfooter, header, hgroup, main, menu, nav, section {\n  display: block;\n}\n/* HTML5 hidden-attribute fix for newer browsers */\n*[hidden] {\n    display: none;\n}\nbody {\n  line-height: 1;\n}\nmenu, ol, ul {\n  list-style: none;\n}\nblockquote, q {\n  quotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n  content: '';\n  content: none;\n}\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\n* {\n  box-sizing: border-box;\n}\nbody {\n  font-weight: 300;\n  font-family: 'Source Sans Pro', sans-serif;\n  background-color:${(props) => props.theme.bgColor};\n  color:${(props) => props.theme.textColor};\n  line-height: 1.2;\n}\na {\n  text-decoration:none;\n  color:inherit;\n}\n`;\n//styled-reset 대신 사용. 전체 도큐먼트에 적용할 기본값은 다음과 같이 GlobalStyle로 사용한다. 렌더링 하게 되면 전체 style에 적용된다.\n\nfunction App() {\n  const isDark = useRecoilValue(isDarkAtom);\n  return (\n    <> \n   {/* Fragment. 부모없이 병렬로 존재하는 태그들을 묶어준다. */}\n    <ThemeProvider theme={isDark ? darkTheme : lightTheme}>\n      \n      <GlobalStyle />\n      <Router />\n      <ReactQueryDevtools initialIsOpen={true} />\n    </ThemeProvider>\n      {/* 캐시에 있는 query를 볼 수 있는 Devtool */}\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { QueryClient, QueryClientProvider } from \"react-query\";\nimport { RecoilRoot } from \"recoil\";\n\nimport App from \"./App\";\n\nconst queryClient = new QueryClient();\n// queryClient(캐시를 관리하기 위한 인스턴스) 만들기. 간단히 해당 이름으로 리액트 쿼리를 사용할 것.\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <QueryClientProvider client={queryClient}>\n        {/* <ThemeProvider theme={theme}> */}\n          <App />\n          {/* ThemeProvider 안에 존재하는 App은 Theme에 접근할 수 있다. 지금은 편집을 위해 App 안으로 옮겨놓은 상태*/}\n        {/* </ThemeProvider> */}\n      </QueryClientProvider>\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}